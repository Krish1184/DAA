import java.util.Scanner; public class 
DA_MatrixChainMultiplication {     public static int 
matrixChainOrder(int[] p, int n) { 
new int[n][n];  
        int[][] dp = 
// dp[i][i] is 0 since only one matrix, so no cost of multiplication         
for (int i = 1; i < n; i++) {             dp[i][i] = 0;  
}  
// L is chain length         for (int L = 
2; L < n; L++) {    
< n - L + 1; i++) {           - 1;  
         for (int i = 1; i 
      int j = i + L 
dp[i][j] = Integer.MAX_VALUE;                 for (int k = i; 
k < j; k++) {                    
* p[k] * p[j];                    
dp[i][j] = cost;  
}  
}  
}  
}  
 int cost = dp[i][k] + dp[k + 1][j] + p[i - 1] 
 if (cost < dp[i][j]) {                         
return dp[1][n - 1]; // Minimum cost to multiply the full chain of matrices  
}  
public static void main(String[] args) {    
scanner = new Scanner(System.in);        
     Scanner 
System.out.print("Enter the number of matrices: ");        
int n = scanner.nextInt(); 
       int[] p = new int[n + 1]; 
System.out.println("Enter the dimensions of matrices:"); for 
(int i = 0; i <= n; i++) {  
System.out.print("p[" + i + "] = ");            
p[i] = scanner.nextInt();  
}  
int minMultiplications = matrixChainOrder(p, n + 1);  
System.out.println("Minimum number of scalar multiplications: " + minMultiplications);         
scanner.close();  
}  
}  
